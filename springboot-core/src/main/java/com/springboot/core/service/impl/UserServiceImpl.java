package com.springboot.core.service.impl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.fastjson.JSON;

import java.util.Date;
import java.util.UUID;

import javax.annotation.Resource;

import com.springboot.dao.UserMapper;
import com.springboot.api.service.IUserService;
import com.springboot.base.entity.User;
import com.springboot.core.common.contans.RedisKeys;
import com.springboot.core.common.utils.RedisUtil;
/**
 *com.springboot.core.service.impl.IUserServices.java
 *2019-06-06 11:37:04
 * This was class generated by ant velocity
 */
@Service
@Component
public class UserServiceImpl implements IUserService{
	
	private static final Logger LOG = LoggerFactory.getLogger(UserServiceImpl.class);
	
	@Resource
	private UserMapper userMapper;
	
	@Autowired
	private RedisUtil  redisUtil;
	
	@Override
	public String addUser(User user) {
		
		LOG.info("增加用户","开始请求","请求参数：user:{}",JSON.toJSONString(user));
		
		String resultDesc = "失败";
		try {
			
			//查询数据库是否有值
			User userDO = userMapper.selectOne(user);
			LOG.info("增加用户,查询数据库,请求参数：user:{},返回参数：userDO:{}", 
					new Object[]{JSON.toJSONString(user),JSON.toJSONString(userDO)});
			if(userDO == null){
				
				//插入数据库
				user.setId(UUID.randomUUID().toString());
				user.setCreateTime(new Date());
				user.setUpdateTime(new Date());
				
				int isSaved = userMapper.insertSelective(user);
				LOG.info("增加用户","插入数据库","请求参数：user:{},返回参数：isSaved:{}",new Object[]{JSON.toJSONString(user),isSaved});
			
			}else {
				
				user.setUpdateTime(new Date());
				int isUpdate = userMapper.updateByPrimaryKeySelective(user);
				LOG.info("增加用户","更新数据库","请求参数：user:{},返回参数：isSaved:{}",new Object[]{JSON.toJSONString(user),isUpdate});

			}
			
			resultDesc = "成功";
			
		} catch (Exception e) {
			
			LOG.info("增加用户","程序运行中抛出异常","请求参数：user:{}",new Object[]{JSON.toJSONString(user)});
			e.printStackTrace();
		}
		
		return resultDesc;
	}

	@Override
	public String addRedisCache(User user) {
		
		LOG.info("新增用户信息到缓存,开始请求,请求参数：user:{}",JSON.toJSONString(user));
		
		String resultDesc = "失败";
		
		try {
			
			redisUtil.set(RedisKeys.getUserCache(user.getUsername()), JSON.toJSONString(user));
			resultDesc = "成功";
			
		} catch (Exception e) {
			
			LOG.info("新增用户信息到缓存,程序运行中抛出异常,请求参数：user:{}",new Object[]{JSON.toJSONString(user)});
			e.printStackTrace();
		}
		
		return resultDesc;
	}
	
}
